write-output "$PSSCriptRoot\..\PSVulnCheck.psd1"
if (Get-Module PSVulnCheck) {Remove-Module PSVulnCheck}; Import-Module "$PSSCriptRoot\..\PSVulnCheck.psd1"
#if (Get-Module PSVulnCheck) {Remove-Module PSVulnCheck}; Import-Module "C:\Users\chmadole\Google Drive\Microsoft Personal\gitHub\PSVulnCheck\PSVulnCheck\1.1.0\PSVulnCheck.psd1"

Describe 'Test-Vulnerability Unit Tests' {
    Context 'Validate Arguments' {

        $services = @(
            @{ Name = 'wsearch'
               TargetPresence = 'Present' #[Absent|Present]
               #TargetStartType = 'Automatic'
            } 
            <#@{ Name = 'winrm'
               TargetState = 'Running'
            }#> 
            @{ Name = 'badservice'
               TargetPresence = 'Absent'
            }
        )

        It 'Should not throw an error testing for services.' {
            {Test-Vulnerability -computerName $env:COMPUTERNAME -Services $services} |
            Should Not Throw
        }

        $test = Test-Vulnerability -computerName $env:COMPUTERNAME -Services $services
        $properties = $services | ForEach-Object {
            $service = $_
            $keys = $service.keys.where{$_ -match 'Target'}.replace('Target','')
            Write-output $keys | ForEach-Object{"$($service.Name)_$_"}
            Write-output $keys | ForEach-Object{"$($service.Name)_Target$_"}
        }

        $properties | ForEach-Object {
            $property = $_
            It "Should contain target values for $Property." {
                [bool]($test.PSObject.Properties.Name -match $property) | Should Be $True
            }
        }

        It 'Should correctly detect the absence of a fakeservice' {
            $badService = @(@{ Name = 'badservice'; TargetPresence = 'Absent'})
            $test = Test-Vulnerability -computerName $env:COMPUTERNAME -Services $badService
            $test.badservice_Presence -eq 'Absent' | Should Be $true
        }

        Write-host ($test | format-table | out-string)
    }
}